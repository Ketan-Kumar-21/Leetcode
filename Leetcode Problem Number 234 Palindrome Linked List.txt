#Brute Force App
#TC=O(n) and SC=O(n)

Code:

class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        stack = []
        temp = head
        while temp:
            stack.append(temp.val)
            temp = temp.next
        temp = head
        while temp:
            if temp.val != stack.pop():
                return False
            temp = temp.next
        
        return True


Optimal App:
#TC=O(n) and SC=O(1)


Code:

class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        if not head or not head.next:
            return True

       
        slow = fast = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

       
        prev = None
        while slow:
            next_node = slow.next
            slow.next = prev
            prev = slow
            slow = next_node
        
        
        first = head
        second = prev
        while second:  
            if first.val != second.val:
                return False
            first = first.next
            second = second.next

        return True
